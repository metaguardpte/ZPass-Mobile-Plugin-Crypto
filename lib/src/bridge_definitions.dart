// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

abstract class ZpCrypto {
  /// 生成注册使用的结构体，raw为 secret_key export 后的十六进制字符串
  String createUserKeyModel(
      {required String identifierName,
      required String masterPassword,
      required String raw,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateUserKeyModelConstMeta;

  /// 根据传入ID，初始化一个secret_key对象，返回 secret key 的十六进制形式字符串
  String generateSecretKey({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateSecretKeyConstMeta;

  /// 根据传入ID，初始化一个crypto加解密对象，后续调用登陆，加解密，分享的接口时都需要带上这个id
  String newCryptoService({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewCryptoServiceConstMeta;

  /// 根据传入ID，使用该crypto对象进行登录
  Future<String> login(
      {required String clientId,
      required String identifierName,
      required String masterPassword,
      required String secretKey,
      required String host,
      required String headerJson,
      required bool isPersonal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  /// 根据传入ID，使用该crypto对象进行登录
  Future<String> relogin(
      {required String clientId,
      required String identifierName,
      required String host,
      required String headerJson,
      required bool isPersonal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReloginConstMeta;

  /// 根据传入ID，使用该crypto对象进行离线登录
  String offlineLogin(
      {required String clientId,
      required String identifierName,
      required String masterPassword,
      required String secretKey,
      required String masterKeyHash,
      String? personalDataKey,
      String? enterpriseDataKey,
      required bool isPersonal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfflineLoginConstMeta;

  /// 根据传入ID，使用该crypto对象进行 个人/企业datakey 的获取， 需先登录
  Future<String> preCacheDataKey(
      {required String clientId, required bool isPersonal, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPreCacheDataKeyConstMeta;

  String destory({required String clientId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDestoryConstMeta;

  /// 根据传入ID，使用该crypto对象配置 个人的datakey，用于加解密
  /// 根据传入ID，使用该crypto对象 配置企业的datakey，用于加解密
  /// 根据传入ID，使用该crypto对象 进行加密，调用前需保证已登录并已set对应的datakey
  String encryptText(
      {required String clientId,
      required String plaintext,
      required bool isPersonal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptTextConstMeta;

  /// 根据传入ID，使用该crypto对象 进行解密，调用前需保证已登录并已set对应的datakey
  String decryptText(
      {required String clientId,
      required String cipherText,
      required bool isPersonal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptTextConstMeta;

  /// 根据传入ID，使用该crypto对象 生成分享密钥的key，调用前需保证已登录及 set enterprise_data_key并传入 user_public_data_key
  Future<String> generateSharedKey(
      {required String clientId, required int userId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateSharedKeyConstMeta;
}
