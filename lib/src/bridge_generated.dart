// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class ZpCryptoImpl implements ZpCrypto {
  final ZpCryptoPlatform _platform;
  factory ZpCryptoImpl(ExternalLibrary dylib) =>
      ZpCryptoImpl.raw(ZpCryptoPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ZpCryptoImpl.wasm(FutureOr<WasmModule> module) =>
      ZpCryptoImpl(module as ExternalLibrary);
  ZpCryptoImpl.raw(this._platform);
  Future<String> createUserKeyModel(
          {required String identifierName,
          required String masterPassword,
          required String raw,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_create_user_key_model(
            port_,
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(masterPassword),
            _platform.api2wire_String(raw)),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateUserKeyModelConstMeta,
        argValues: [identifierName, masterPassword, raw],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateUserKeyModelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_user_key_model",
        argNames: ["identifierName", "masterPassword", "raw"],
      );

  String generateSecretKey({dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_generate_secret_key(),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kGenerateSecretKeyConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateSecretKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_secret_key",
        argNames: [],
      );

  String newCryptoService({dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_new_crypto_service(),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kNewCryptoServiceConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNewCryptoServiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_crypto_service",
        argNames: [],
      );

  Future<String> login(
          {required String clientId,
          required String identifierName,
          required String masterPassword,
          required String secretKey,
          required String host,
          required String headerJson,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_login(
            port_,
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(masterPassword),
            _platform.api2wire_String(secretKey),
            _platform.api2wire_String(host),
            _platform.api2wire_String(headerJson),
            isPersonal),
        parseSuccessData: _wire2api_String,
        constMeta: kLoginConstMeta,
        argValues: [
          clientId,
          identifierName,
          masterPassword,
          secretKey,
          host,
          headerJson,
          isPersonal
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "login",
        argNames: [
          "clientId",
          "identifierName",
          "masterPassword",
          "secretKey",
          "host",
          "headerJson",
          "isPersonal"
        ],
      );

  Future<String> relogin(
          {required String clientId,
          required String identifierName,
          required String host,
          required String headerJson,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_relogin(
            port_,
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(host),
            _platform.api2wire_String(headerJson),
            isPersonal),
        parseSuccessData: _wire2api_String,
        constMeta: kReloginConstMeta,
        argValues: [clientId, identifierName, host, headerJson, isPersonal],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReloginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "relogin",
        argNames: [
          "clientId",
          "identifierName",
          "host",
          "headerJson",
          "isPersonal"
        ],
      );

  String offlineLogin(
          {required String clientId,
          required String identifierName,
          required String masterKey,
          required String masterKeyHash,
          String? personalDataKey,
          String? enterpriseDataKey,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_offline_login(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(masterKey),
            _platform.api2wire_String(masterKeyHash),
            _platform.api2wire_opt_String(personalDataKey),
            _platform.api2wire_opt_String(enterpriseDataKey),
            isPersonal),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kOfflineLoginConstMeta,
        argValues: [
          clientId,
          identifierName,
          masterKey,
          masterKeyHash,
          personalDataKey,
          enterpriseDataKey,
          isPersonal
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kOfflineLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "offline_login",
        argNames: [
          "clientId",
          "identifierName",
          "masterKey",
          "masterKeyHash",
          "personalDataKey",
          "enterpriseDataKey",
          "isPersonal"
        ],
      );

  Future<String> preCacheDataKey(
          {required String clientId, required bool isPersonal, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_pre_cache_data_key(
            port_, _platform.api2wire_String(clientId), isPersonal),
        parseSuccessData: _wire2api_String,
        constMeta: kPreCacheDataKeyConstMeta,
        argValues: [clientId, isPersonal],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPreCacheDataKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pre_cache_data_key",
        argNames: ["clientId", "isPersonal"],
      );

  String destory({required String clientId, dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () =>
            _platform.inner.wire_destory(_platform.api2wire_String(clientId)),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kDestoryConstMeta,
        argValues: [clientId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDestoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "destory",
        argNames: ["clientId"],
      );

  String getDataKeyRequestBody(
          {required String clientId, required String payload, dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_get_data_key_request_body(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(payload)),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kGetDataKeyRequestBodyConstMeta,
        argValues: [clientId, payload],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetDataKeyRequestBodyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_data_key_request_body",
        argNames: ["clientId", "payload"],
      );

  String deriveDataKey(
          {required String clientId,
          required String dataKey,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_derive_data_key(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(dataKey),
            isPersonal),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kDeriveDataKeyConstMeta,
        argValues: [clientId, dataKey, isPersonal],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDeriveDataKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "derive_data_key",
        argNames: ["clientId", "dataKey", "isPersonal"],
      );

  String encryptText(
          {required String clientId,
          required String plaintext,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_encrypt_text(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(plaintext),
            isPersonal),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kEncryptTextConstMeta,
        argValues: [clientId, plaintext, isPersonal],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptTextConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_text",
        argNames: ["clientId", "plaintext", "isPersonal"],
      );

  String decryptText(
          {required String clientId,
          required String cipherText,
          required bool isPersonal,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_decrypt_text(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(cipherText),
            isPersonal),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kDecryptTextConstMeta,
        argValues: [clientId, cipherText, isPersonal],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptTextConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_text",
        argNames: ["clientId", "cipherText", "isPersonal"],
      );

  Future<String> generateSharedKey(
          {required String clientId, required int userId, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_generate_shared_key(
            port_, _platform.api2wire_String(clientId), api2wire_i32(userId)),
        parseSuccessData: _wire2api_String,
        constMeta: kGenerateSharedKeyConstMeta,
        argValues: [clientId, userId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateSharedKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_shared_key",
        argNames: ["clientId", "userId"],
      );

  String generatePhemeral({dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_generate_phemeral(),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kGeneratePhemeralConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGeneratePhemeralConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_phemeral",
        argNames: [],
      );

  Future<String> generateLoginBody(
          {required String clientId,
          required String identifierName,
          required String masterPassword,
          required String secretKey,
          required String clientPair,
          required String serverPublicKey,
          required String payload,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_generate_login_body(
            port_,
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(masterPassword),
            _platform.api2wire_String(secretKey),
            _platform.api2wire_String(clientPair),
            _platform.api2wire_String(serverPublicKey),
            _platform.api2wire_String(payload)),
        parseSuccessData: _wire2api_String,
        constMeta: kGenerateLoginBodyConstMeta,
        argValues: [
          clientId,
          identifierName,
          masterPassword,
          secretKey,
          clientPair,
          serverPublicKey,
          payload
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateLoginBodyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_login_body",
        argNames: [
          "clientId",
          "identifierName",
          "masterPassword",
          "secretKey",
          "clientPair",
          "serverPublicKey",
          "payload"
        ],
      );

  String verifyServer(
          {required String clientId,
          required String clientPair,
          required String serverIdentifierProof,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_verify_server(
            _platform.api2wire_String(clientId),
            _platform.api2wire_String(clientPair),
            _platform.api2wire_String(serverIdentifierProof)),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kVerifyServerConstMeta,
        argValues: [clientId, clientPair, serverIdentifierProof],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kVerifyServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_server",
        argNames: ["clientId", "clientPair", "serverIdentifierProof"],
      );

  String calcPasswordHash(
          {required String identifierName,
          required String masterPassword,
          required String secretKey,
          dynamic hint}) =>
      _platform.executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => _platform.inner.wire_calc_password_hash(
            _platform.api2wire_String(identifierName),
            _platform.api2wire_String(masterPassword),
            _platform.api2wire_String(secretKey)),
        parseSuccessData: _wire2api_SyncReturn_String,
        constMeta: kCalcPasswordHashConstMeta,
        argValues: [identifierName, masterPassword, secretKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCalcPasswordHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "calc_password_hash",
        argNames: ["identifierName", "masterPassword", "secretKey"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  String _wire2api_SyncReturn_String(Uint8List raw) {
    return utf8.decode(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class ZpCryptoPlatform extends FlutterRustBridgeBase<ZpCryptoWire> {
  ZpCryptoPlatform(ffi.DynamicLibrary dylib) : super(ZpCryptoWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ZpCryptoWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ZpCryptoWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ZpCryptoWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'zp_store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_create_user_key_model(
    int port_,
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> master_password,
    ffi.Pointer<wire_uint_8_list> raw,
  ) {
    return _wire_create_user_key_model(
      port_,
      identifier_name,
      master_password,
      raw,
    );
  }

  late final _wire_create_user_key_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_user_key_model');
  late final _wire_create_user_key_model =
      _wire_create_user_key_modelPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_generate_secret_key() {
    return _wire_generate_secret_key();
  }

  late final _wire_generate_secret_keyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_generate_secret_key');
  late final _wire_generate_secret_key = _wire_generate_secret_keyPtr
      .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_new_crypto_service() {
    return _wire_new_crypto_service();
  }

  late final _wire_new_crypto_servicePtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_new_crypto_service');
  late final _wire_new_crypto_service =
      _wire_new_crypto_servicePtr.asFunction<WireSyncReturnStruct Function()>();

  void wire_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> master_password,
    ffi.Pointer<wire_uint_8_list> secret_key,
    ffi.Pointer<wire_uint_8_list> host,
    ffi.Pointer<wire_uint_8_list> header_json,
    bool is_personal,
  ) {
    return _wire_login(
      port_,
      client_id,
      identifier_name,
      master_password,
      secret_key,
      host,
      header_json,
      is_personal,
    );
  }

  late final _wire_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_login');
  late final _wire_login = _wire_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_relogin(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> host,
    ffi.Pointer<wire_uint_8_list> header_json,
    bool is_personal,
  ) {
    return _wire_relogin(
      port_,
      client_id,
      identifier_name,
      host,
      header_json,
      is_personal,
    );
  }

  late final _wire_reloginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_relogin');
  late final _wire_relogin = _wire_reloginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  WireSyncReturnStruct wire_offline_login(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> master_key,
    ffi.Pointer<wire_uint_8_list> master_key_hash,
    ffi.Pointer<wire_uint_8_list> personal_data_key,
    ffi.Pointer<wire_uint_8_list> enterprise_data_key,
    bool is_personal,
  ) {
    return _wire_offline_login(
      client_id,
      identifier_name,
      master_key,
      master_key_hash,
      personal_data_key,
      enterprise_data_key,
      is_personal,
    );
  }

  late final _wire_offline_loginPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_offline_login');
  late final _wire_offline_login = _wire_offline_loginPtr.asFunction<
      WireSyncReturnStruct Function(
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_pre_cache_data_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    bool is_personal,
  ) {
    return _wire_pre_cache_data_key(
      port_,
      client_id,
      is_personal,
    );
  }

  late final _wire_pre_cache_data_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_pre_cache_data_key');
  late final _wire_pre_cache_data_key = _wire_pre_cache_data_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturnStruct wire_destory(
    ffi.Pointer<wire_uint_8_list> client_id,
  ) {
    return _wire_destory(
      client_id,
    );
  }

  late final _wire_destoryPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_destory');
  late final _wire_destory = _wire_destoryPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_get_data_key_request_body(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> payload,
  ) {
    return _wire_get_data_key_request_body(
      client_id,
      payload,
    );
  }

  late final _wire_get_data_key_request_bodyPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_data_key_request_body');
  late final _wire_get_data_key_request_body =
      _wire_get_data_key_request_bodyPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_derive_data_key(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> data_key,
    bool is_personal,
  ) {
    return _wire_derive_data_key(
      client_id,
      data_key,
      is_personal,
    );
  }

  late final _wire_derive_data_keyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_derive_data_key');
  late final _wire_derive_data_key = _wire_derive_data_keyPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturnStruct wire_encrypt_text(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> plaintext,
    bool is_personal,
  ) {
    return _wire_encrypt_text(
      client_id,
      plaintext,
      is_personal,
    );
  }

  late final _wire_encrypt_textPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>('wire_encrypt_text');
  late final _wire_encrypt_text = _wire_encrypt_textPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturnStruct wire_decrypt_text(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> cipher_text,
    bool is_personal,
  ) {
    return _wire_decrypt_text(
      client_id,
      cipher_text,
      is_personal,
    );
  }

  late final _wire_decrypt_textPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>('wire_decrypt_text');
  late final _wire_decrypt_text = _wire_decrypt_textPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_generate_shared_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    int user_id,
  ) {
    return _wire_generate_shared_key(
      port_,
      client_id,
      user_id,
    );
  }

  late final _wire_generate_shared_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_generate_shared_key');
  late final _wire_generate_shared_key = _wire_generate_shared_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturnStruct wire_generate_phemeral() {
    return _wire_generate_phemeral();
  }

  late final _wire_generate_phemeralPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_generate_phemeral');
  late final _wire_generate_phemeral =
      _wire_generate_phemeralPtr.asFunction<WireSyncReturnStruct Function()>();

  void wire_generate_login_body(
    int port_,
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> master_password,
    ffi.Pointer<wire_uint_8_list> secret_key,
    ffi.Pointer<wire_uint_8_list> client_pair,
    ffi.Pointer<wire_uint_8_list> server_public_key,
    ffi.Pointer<wire_uint_8_list> payload,
  ) {
    return _wire_generate_login_body(
      port_,
      client_id,
      identifier_name,
      master_password,
      secret_key,
      client_pair,
      server_public_key,
      payload,
    );
  }

  late final _wire_generate_login_bodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_login_body');
  late final _wire_generate_login_body =
      _wire_generate_login_bodyPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_verify_server(
    ffi.Pointer<wire_uint_8_list> client_id,
    ffi.Pointer<wire_uint_8_list> client_pair,
    ffi.Pointer<wire_uint_8_list> server_identifier_proof,
  ) {
    return _wire_verify_server(
      client_id,
      client_pair,
      server_identifier_proof,
    );
  }

  late final _wire_verify_serverPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_verify_server');
  late final _wire_verify_server = _wire_verify_serverPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_calc_password_hash(
    ffi.Pointer<wire_uint_8_list> identifier_name,
    ffi.Pointer<wire_uint_8_list> master_password,
    ffi.Pointer<wire_uint_8_list> secret_key,
  ) {
    return _wire_calc_password_hash(
      identifier_name,
      master_password,
      secret_key,
    );
  }

  late final _wire_calc_password_hashPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_calc_password_hash');
  late final _wire_calc_password_hash = _wire_calc_password_hashPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

const int AES256GCM_IV_BYTE_SIZE = 12;
